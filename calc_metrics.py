import argparse

import matplotlib.pyplot as plt
import pandas as pd
from sklearn.metrics import classification_report, confusion_matrix, ConfusionMatrixDisplay


def metrics(df):
    labels = df['label_name']

    def get_choice_by_name(row):
        choice = row['choice']
        if pd.isna(choice):
            return 'neither'
        lbl_name = row['label_name']
        lbl_nr = row['label_nr']
        if lbl_nr == choice:
            return lbl_name
        else:
            return {'de_dicto': 'de_re', 'de_re': 'de_dicto'}[lbl_name]

    choices = df.apply(get_choice_by_name, axis=1)

    print(classification_report(labels, choices))
    print(confusion_matrix(labels, choices))

    ConfusionMatrixDisplay.from_predictions(labels, choices)
    plt.show()

    print(f"{df['success'].sum()}/{len(df)} calls returned a usable, parseable result.")


def inspect_errors(df):
    pd.set_option('display.max_colwidth', None)
    print('The completions that failed to parse: ')
    for i, row in df[~df['success']].iterrows():
        print('==== PROMPT ====')
        print(row['prompt'])
        print('\n==== COMPLETION ====')
        print(row['full_completion'])
        print('\n#################################################\n')


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='')
    parser.add_argument('--results_file', type=str)
    parser.add_argument('--print_failures', action='store_true')
    _args = parser.parse_args()

    _df = pd.read_json(_args.results_file, orient='records', lines=True)

    metrics(_df)
    if _args.print_failures:
        inspect_errors(_df)
